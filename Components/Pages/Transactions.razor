@page "/transactions"
@using ExpenseTracker.Models
@inject TransactionService TransactionService;
@inject TagService TagService;

<NavLink class="back" href="/dashboard">Back</NavLink>
<h1>Transactions</h1>


<div class="filter-container">
    <h2>Filter & Sort Transactions</h2>
    <div class="filters">
        <!-- Filter by Type -->
        <div class="filter-item">
            <label for="type-filter">Type:</label>
            <select id="type-filter" @onchange="FilterByType">
                <option value="All">All</option>
                <option value="CashIn">CashIn</option>
                <option value="CashOut">CashOut</option>
                <option value="Debt">Debt</option>
            </select>
        </div>

        <!-- Filter by Tags -->
        <div class="filter-item">
            <label for="tags-filter">Tags:</label>
            <select id="tags-filter" @onchange="FilterByTag">
                <option value="All">All</option>
                @foreach (var tag in TagService.GetTagNames())
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>

        <!-- Filter by Date Range -->
        <div class="filter-item">
            <label for="date-start">Date Range:</label>
            <input type="date" id="date-start" @onchange="SetStartDate" />
            <span>to</span>
            <input type="date" id="date-end" @onchange="SetEndDate" />
        </div>

        <!-- Sorting -->
        <div class="filter-item">
            <label for="search">Search:</label>
            <input type="text" id="search" placeholder="Search transactions" @oninput="OnSearchChanged" />
        </div>

    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Source</th>
            <th>Type</th>
            <th>Tags</th>
            <th>Amount</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in filteredTransactions)
        {
            <tr>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>@transaction.Source</td>
                <td style="color: @(transaction.Type == TransactionType.CashIn ? "green" : "red");">@transaction.Type</td>
                <td>
                    @foreach (var tag in transaction.Tags)
                    {
                        <span class="chip">@tag</span>
                    }
                </td>
                <td style="color: @(transaction.Type == TransactionType.CashIn ? "green" : "red");">
                    NPR @transaction.Amount
                </td>
                <td>@transaction.Notes</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .filter-container {
        margin: 30px auto;
        padding: 20px 25px;
        max-width: 950px;
        background: linear-gradient(135deg, #ffffff, #f5f5f5);
        border-radius: 12px;
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        border: 1px solid #e6e6e6;
    }

        .filter-container h2 {
            font-size: 22px;
            margin-bottom: 15px;
            font-family: 'Poppins', sans-serif;
            text-align: center;
            color: #4d4d4d;
        }

    .filters {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 20px;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
    }

        .filter-item label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #555;
            font-size: 14px;
        }

        .filter-item select,
        .filter-item input {
            padding: 12px 15px;
            font-size: 14px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            background: #fff;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

            .filter-item select:hover,
            .filter-item input:hover {
                border-color: #0073e6;
                box-shadow: 0 2px 5px rgba(0, 115, 230, 0.2);
            }

            .filter-item input::placeholder {
                color: #aaa;
                font-style: italic;
            }

    #search {
        width: 100%;
        font-family: 'Poppins', sans-serif;
    }

    .filter-actions {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 15px;
    }

    .btn-reset {
        background-color: #ff6666;
        color: #fff;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 600;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-reset:hover {
            background-color: #cc3333;
        }

    .btn-apply {
        background-color: #4caf50;
        color: #fff;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 600;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-apply:hover {
            background-color: #3e8e41;
        }
    .chip {
        display: inline-block;
        background-color: lightblue;
        color: #333;
        padding: 5px 10px;
        margin: 2px;
        border-radius: 8px;
        font-size: 12px;
        font-weight: bold;
        border: 1px solid #ccc;
    }

    .back {
        background: #;
        color: black;
        margin: 10px 0;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
    }

    .filters {
        margin-bottom: 20px;
    }

        .filters label {
            margin-right: 10px;
        }

    .btn {
        margin: 5px;
        padding: 5px 10px;
        background-color: lightgray;
        border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
    }
</style>

@code {
    private List<Transaction> transactions = new();
    private List<Transaction> filteredTransactions = new();

    // Sort & Filter specific variables
    private string selectedType = "All";
    private string selectedTag = "All";
    private DateTime? startDate;
    private DateTime? endDate;

    private string searchQuery = string.Empty;

    protected override void OnInitialized()
    {
        // Load transactions from the db
        transactions = TransactionService.LoadTransactions();
        filteredTransactions = transactions;
    }
    private void FilterByType(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? "All";
        ApplyFilters();
    }
    private void FilterByTag(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString() ?? "All";
        ApplyFilters();
    }
    private void SetStartDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime date))
        {
            startDate = date;
            ApplyFilters();
        }
    }
    private void SetEndDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime date))
        {
            endDate = date;
            ApplyFilters();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }
    private void ApplyFilters()
    {
        filteredTransactions = transactions;
        if (selectedType != "All")
        {
            filteredTransactions = filteredTransactions.Where(t => t.Type.ToString() == selectedType).ToList();
        }
        if (selectedTag != "All")
        {
            filteredTransactions = filteredTransactions.Where(t => t.Tags.Contains(selectedTag)).ToList();
        }
        if (startDate != null)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= startDate).ToList();
        }
        if (endDate != null)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= endDate).ToList();
        }

        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Source.Contains(searchQuery) || t.Notes.Contains(searchQuery)).ToList();
        }
    }
}