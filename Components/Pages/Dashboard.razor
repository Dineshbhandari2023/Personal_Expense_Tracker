@page "/dashboard"
@inject NavigationManager NavigationManager
@inject TagService TagService
@inject TransactionService TransactionService
@using ExpenseTracker.Models;

<h3 class="welcome">Dashboard</h3>

<div class="dashboard">
    <!-- Header -->
    <header class="dashboard-header">
        <h1>Expense Tracker</h1>
        <div class="user-actions">
            <button class="show-transaction" @onclick="NavigateToTransactions">Show All Transactions</button>
            <button class="show-transaction" @onclick="NavigateToDebtManagement">Manage Debts</button>
            <button class="logout" @onclick="Logout">Logout</button>
            <div class="profile" @onclick="NavigateToSettings">Profile</div>
        </div>
    </header>

    <!-- Summary Cards -->
    <div class="summary-cards">
        <div class="card">Total Cash <span>@totalCash</span></div>
        <div class="card">Total Inflows <span>@Inflow</span></div>
        <div class="card">Total Outflows <span>@Outflow</span></div>
        <div class="card">Total Debts <span>@Debt</span></div>
        <div class="card">Cleared Debt <span>@clearedDebt</span></div>
        <div class="card">Remaining Debt <span>@remainingDebt</span></div>
        <div class="card">Total Transactions <span>@Transactions</span></div>
    </div>

    <!-- Transactions Section -->
    <div class="transactions-section">

        <div class="transactions">
            <h4>Top 5 Highest Transactions</h4>

            <ul class="transaction-list">
                @if (recentTransactions != null && recentTransactions.Any())
                {
                    foreach (var transaction in recentTransactions)
                    {
                        var transactionStatus = transaction.Type == TransactionType.CashIn ? "positive" : "negative";
                        var iconClass = transaction.Type == TransactionType.CashIn ? "up" : "down";

                        var icon = transaction.Type == TransactionType.CashIn ? "⬆" : "⬇";

                        <li class="transaction @transactionStatus">@transaction.Source<span>NPR @transaction.Amount</span></li>
                    }
                }
                else
                {
                    <p>No recent transactions found.</p>
                }
            </ul>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="actions-grid">
            <div class="batch" @onclick="NavigateToCashIn">
                <h1 class="plus">+</h1>
                <h3>Cash In</h3>
            </div>
            <div class="batch" @onclick="NavigateToCashOut">
                <h1 class="minus">-</h1>
                <h3>Cash Out</h3>
            </div>
            <div class="batch" @onclick="NavigateToAddDebt">
                <h1 class="debt">+</h1>
                <h3>Add Debt</h3>
            </div>
            <div class="batch" @onclick="OpenTagModal">
                <h1 class="tag">+</h1>
                <h3>Add Tags</h3>
            </div>
        </div>

    </div>
</div>

@if (showTagModal)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Add a Tag</h3>
            <input type="text" @bind="newTag" placeholder="Enter tag name" />
            <button @onclick="AddTag">Add Tag</button>
            <button @onclick="CloseTagModal">Close</button>
        </div>
    </div>
}

@code {
    private bool showTagModal = false;
    private string newTag = "";


    private void OpenTagModal()
    {
        showTagModal = true;
    }

    private void CloseTagModal()
    {
        showTagModal = false;
        newTag = "";
    }

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTag))
        {
            TagService.AddTag(newTag); 
            showTagModal = false;
            newTag = "";
        }
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/"); 
    }
    private void NavigateToCashIn()
    {
        NavigationManager.NavigateTo("/cashin");
    }

    private void NavigateToCashOut()
    {
        NavigationManager.NavigateTo("/cashout");
    }

    private void NavigateToAddDebt()
    {
        NavigationManager.NavigateTo("/adddebt");
    }

    private void NavigateToFilter()
    {
        NavigationManager.NavigateTo("/filter");
    }
    private void NavigateToDebtManagement()
    {
        NavigationManager.NavigateTo("/debtmanagement");
    }
    private void NavigateToTransactions()
    {
        NavigationManager.NavigateTo("/transactions");
    }
    private void NavigateToSettings()
    {
        NavigationManager.NavigateTo("/settings");
    }
}

@code {
    private decimal totalCash;
    private decimal Inflow;
    private decimal Outflow;
    private int Transactions;
    private decimal Debt;
    private decimal remainingDebt;
    private decimal clearedDebt;


    private List<Transaction> recentTransactions = new();
    private List<Transaction> pendingDebts = new();

    protected override void OnInitialized()
    {
        totalCash = TransactionService.GetTotalCash();
        Inflow = TransactionService.GetTotalCashInflow();
        Outflow = TransactionService.GetTotalCashOutflow();
        Transactions = TransactionService.GetTotalTransactions();

        Debt = TransactionService.GetTotalDebt();
        remainingDebt = TransactionService.GetRemainingDebt();
        clearedDebt = TransactionService.GetClearedDebt();

        recentTransactions = TransactionService.GetTopRecentTransactions();
        pendingDebts = TransactionService.GetPendingDebtTransactions();
    }
}

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background: #f5f5f5;
        color: #333;
    }

    .welcome {
        font-weight: 600;
    }

    .dashboard {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .dashboard-header {
        background: white;
        padding: 10px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        border-radius: 8px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

        .dashboard-header h1 {
            font-size: 24px;
        }

    .user-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .logout {
        background: #ff4d4d;
        color: white;
        border: none;
        padding: 5px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

    .profile {
        background: #ddd;
        color: #333;
        font-size: 14px;
        padding: 10px;
        border-radius: 50%;
        text-align: center;
        width: 40px;
        height: 40px;
        line-height: 20px;
        cursor: pointer;
    }

    .summary-cards {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px;
        margin-bottom: 20px;
    }

    .card {
        background: white;
        font-weight: bold;
        color: #333;
        font-size: 16px;
        padding: 15px;
        text-align: left;
        border-radius: 5px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .transactions-section {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .show-transaction {
        align-items: right;
        background: blue;
        color: white;
        border: none;
        padding: 5px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

    .transaction-list {
        list-style: none;
        padding: 0;
    }

    .transaction {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 14px;
    }

    .positive {
        color: green;
    }

    .quick-actions {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        text-align: center;
        5
    }

        .actions-grid div {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 15px;
            border: 2px solid #ccc;
            border-radius: 5px;
        }

    .plus {
        color: blue;
        font-size: 24px;
    }

    .minus {
        color: red;
        font-size: 24px;
    }

    .debt {
        color: orange;
        font-size: 24px;
    }

    .filter {
        color: green;
        font-size: 24px;
    }

    .batch {
        cursor: pointer;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: white;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        text-align: center;
    }

    .modal input {
        padding: 10px;
        font-size: 16px;
        width: 100%;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 2px solid #ccc;
    }

    .modal button {
        padding: 10px;
        margin: 5px;
        background-color: blue;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

        .modal button:hover {
            background-color: white;
            color: black;
        }
</style>
