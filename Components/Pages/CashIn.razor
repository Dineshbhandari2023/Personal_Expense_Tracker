@page "/cashin"
@using ExpenseTracker.Components.Layout
@inject NavigationManager NavigationManager
@inject TransactionService TransactionService
@using ExpenseTracker.Models

<h3 class="cashin-title">Cash In</h3>

<div class="cashin-container">
    <form class="cashin-form" @onsubmit="HandleSubmit">
        <div>
            <label for="source">Source</label>
            <input type="text" id="source" @bind="source" placeholder="EG: Salary, Rent, Groceries, Monthly" required />
        </div>
        <div>
            <label for="amount">Amount</label>
            <input type="text" id="amount" @bind="amount" placeholder="$0.00" required />
        </div>
        <div>
            <label for="date">Date</label>
            <input type="date" @bind="date" required />
        </div>
        <label for="tags">Tags</label>
        <div id="tags" class="dropdown-check-list" tabindex="100">
            <div class="selected-tags">
                @if (selectedTags.Count > 0)
                {
                    <p>Selected Tags: @string.Join(", ", selectedTags)</p>
                }
                else
                {
                    <p>No tags selected</p>
                }
            </div>
            <span class="anchor" @onclick="ToggleDropdown">Select Tags</span>
            <ul class="items" style="@DropdownStyle">
                @foreach (var tag in availableTags)
                {
                    <li>
                        <input type="checkbox" @onchange="(e) => HandleTagSelection(tag)" /> @tag
                    </li>
                }
            </ul>
        </div>
        <br />
        <div>
            <label for="notes">Notes</label>
            <textarea id="notes" @bind="notes" placeholder="Add a note to describe your transaction" rows="3"></textarea>
        </div>
        <button type="submit" class="cashin-button">Cash In</button>
         <NavLink class="back" href="/dashboard">Back</NavLink>
    </form>
</div>



@code {
    private string source;
    private decimal amount;
    private DateTime date = DateTime.Today;

    private List<string> availableTags = new TagService().GetTagNames();
    private List<string> selectedTags = new List<string>();
    private string notes;

    private void HandleTagSelection(string selectedTag)
    {
        if (!string.IsNullOrEmpty(selectedTag) && !selectedTags.Contains(selectedTag))
        {
            selectedTags.Add(selectedTag);
        }
        else
        {
            selectedTags.Remove(selectedTag);
        }
    }

    private void HandleSubmit()
    {
        var cashInTransaction = new Transaction
            {
                Source = source,
                Amount = amount,
                Date = date,
                Tags = selectedTags,
                Type = TransactionType.CashIn,
                Notes = notes
            };

        TransactionService.AddCashTransaction(cashInTransaction);
        NavigationManager.NavigateTo("/transactions");
    }

    private bool IsDropdownOpen = false;

    private string DropdownStyle => IsDropdownOpen ? "display: block;" : "display: none;";

    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }

    // Optional: Close the dropdown when clicking outside (advanced)
    private void CloseDropdown(MouseEventArgs e)
    {
        IsDropdownOpen = false;
    }
}

<style>
    .back {
        background: #;
        color: black;
        margin: 10px 0;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
    }

    .anchor {
        cursor: pointer;
        display: block;
        padding: 5px;
        background: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .items {
        position: absolute;
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 50%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        padding: 5px 0;
    }

    .cashin-container {
        width: 400px;
        margin: 50px auto;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .cashin-title {
        text-align: center;
        font-size: 24px;
        margin-bottom: 20px;
    }

    .cashin-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

        .cashin-form div {
            display: flex;
            flex-direction: column;
        }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    input {
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .cashin-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
    }

        .cashin-button:hover {
            background-color: #0056b3;
        }
</style>

